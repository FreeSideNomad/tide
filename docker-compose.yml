version: '3.8'

services:
  postgres:
    image: pgvector/pgvector:pg16
    environment:
      POSTGRES_DB: tide_db
      POSTGRES_USER: tide_user
      POSTGRES_PASSWORD: tide_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U tide_user -d tide_db"]
      interval: 5s
      timeout: 5s
      retries: 5

  app:
    build: .
    ports:
      - "8080:8080"
    environment:
      - DATABASE_URL=postgresql://tide_user:tide_password@postgres:5432/tide_db
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - DEBUG=True
      - ENVIRONMENT=development
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./src:/app/src
      - ./tests:/app/tests
    command: uv run flet run --web --port 8080 --host 0.0.0.0

  test:
    build: .
    environment:
      - DATABASE_URL=postgresql://tide_user:tide_password@postgres:5432/tide_db_test
      - OPENAI_API_KEY=test-key
      - DEBUG=True
      - ENVIRONMENT=test
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - default
    volumes:
      - ./src:/app/src
      - ./tests:/app/tests
      - ./coverage:/app/coverage
    command: >
      sh -c "
        echo 'Waiting for postgres to be ready...' &&
        for i in {1..30}; do
          if pg_isready -h postgres -p 5432 -U tide_user; then
            echo 'Postgres is ready'
            break
          fi
          echo 'Waiting for postgres...'
          sleep 2
        done &&
        echo 'Running unit tests only in Docker (skip database-dependent tests)...' &&
        uv run pytest tests/unit/ --cov=src --cov-report=html:/app/coverage --cov-report=xml:/app/coverage/coverage.xml --cov-report=term-missing -v
      "
    profiles:
      - test

volumes:
  postgres_data: